PROJECT(qcpp)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
ENABLE_TESTING()

IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE Release)
ENDIF()

IF (NOT QCPP_VERSION)
        # git describe as versioning
        EXECUTE_PROCESS(COMMAND git describe --always
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        OUTPUT_VARIABLE QCPP_VERSION
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF()

MESSAGE(STATUS "${CMAKE_BUILD_TYPE} build of ${PROJECT_NAME} version: ${QCPP_VERSION}")

###############################
## Find Packages and Headers ##
###############################


### SeqAn
# Included in tree for simplicity, but we need to tell seqan we have zlib
SET(DEPENDS_CFLAGS "${DEPENDS_CFLAGS} -DSEQAN_HAS_ZLIB=1 -DSEQAN_HAS_OPENMP=1 -DSEQAN_NO_GLOBAL_EXCEPTION_HANDLER")

### BZ2
FIND_PACKAGE(BZip2)
IF(BZIP2_FOUND)
    SET(DEPENDS_LIBS ${DEPENDS_LIBS} ${BZIP2_LIBRARIES})
    SET(DEPENDS_INLCUDE_DIRS ${DEPENDS_INLCUDE_DIRS} ${BZIP2_INCLUDE_DIR})
    SET(DEPENDS_CFLAGS "${DEPENDS_CFLAGS} -DSEQAN_HAS_BZIP2=1")
ENDIF()

### Zlib
FIND_PACKAGE(ZLIB 1.2.5 REQUIRED)
SET(DEPENDS_LIBS ${DEPENDS_LIBS} ${ZLIB_LIBRARIES})
SET(DEPENDS_CFLAGS "${DEPENDS_CFLAGS} ${ZLIB_CFLAGS}")
SET(DEPENDS_INLCUDE_DIRS ${DEPENDS_INLCUDE_DIRS} ${ZLIB_INCLUDE_DIRS})

### Get the OpenMP flag
FIND_PACKAGE(OpenMP REQUIRED)
SET(DEPENDS_CFLAGS "${DEPENDS_CFLAGS} ${OpenMP_C_FLAGS}")

### Boost
FIND_PACKAGE(Boost REQUIRED)
SET(DEPENDS_INLCUDE_DIRS ${DEPENDS_INLCUDE_DIRS} ${Boost_INCLUDE_DIRS})
# We don't personally link to Boost, so no need to add to libary deps. We only
# need the inlcude dir for yaml-cpp. I'm leaving these here because I'll
# probably end up using Boost.
# SET(DEPENDS_LIB_DIRS ${DEPENDS_LIB_DIRS} ${Boost_LIBRARY_DIRS})
# SET(DEPENDS_LIBS ${DEPENDS_LIBS} ${Boost_LIBRARIES})

### yaml-cpp
FIND_PACKAGE(YamlCpp REQUIRED)
SET(DEPENDS_LIB_DIRS ${DEPENDS_LIB_DIRS} ${YAMLCPP_LIBRARY_DIR})
SET(DEPENDS_LIBS ${DEPENDS_LIBS} ${YAMLCPP_LIBRARY})
SET(DEPENDS_INLCUDE_DIRS ${DEPENDS_INLCUDE_DIRS} ${YAMLCPP_INCLUDE_DIR})


##########################
## Set Compiler Options ##
##########################

OPTION(ENABLE_ASAN "Build with AddressSanitizer" OFF)
OPTION(ENABLE_TSAN "Build with ThreadSanitizer" OFF)

# Set CFLAGS
SET(WRN "${WRN} -Wall")

SET(OPT_FLAGS "${OPT_FLAGS} -O3 -ffast-math")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WRN} ${OPT_FLAGS} ${DEPENDS_CFLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WRN} ${OPT_FLAGS} ${DEPENDS_CFLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

IF(ENABLE_ASAN AND ENABLE_TSAN)
	MESSAGE(FATAL_ERROR "Cannot enable both TSan and ASan")
ENDIF()

IF(ENABLE_UBSAN)
	MESSAGE(STATUS "UBSan Enabled")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=undefined")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
ENDIF()

IF(ENABLE_ASAN)
	MESSAGE(STATUS "ASan Enabled")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
ENDIF()

IF(ENABLE_TSAN)
	MESSAGE(STATUS "TSan Enabled")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=thread -fPIC -pie")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread -fPIC -pie")
ENDIF()

INCLUDE_DIRECTORIES(${DEPENDS_INLCUDE_DIRS}
                    ${CMAKE_BINARY_DIR}
                    ${CMAKE_SOURCE_DIR}/src
                    ${CMAKE_SOURCE_DIR}/src/ext
                    ${CMAKE_SOURCE_DIR}/src/tests
                    ${CMAKE_SOURCE_DIR}/src/tests/ext
                    )

LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/lib)

ADD_SUBDIRECTORY(src)
